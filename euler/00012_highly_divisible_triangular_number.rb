
=begin

Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. 
So the seventh triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

=end

triangle_number_data = [1,1]
divisor_size = 0
target_divisor_size = 500

def next_triangle_number triangle_number_data
	triangle_number_data[1] = triangle_number_data[1] + 1
	triangle_number_data[0] = triangle_number_data[0] + triangle_number_data[1]
end

def get_divisors num
	max = num
	i = 1
	divisors = Array.new
	while i < max
		if num % i == 0
			max = num / i
			divisors << i
			if i != max
				divisors << max
			end
		end
		i = i + 1
	end
	divisors
end

start_time = Time.now


while divisor_size < target_divisor_size
	next_triangle_number triangle_number_data
	triangle_number = triangle_number_data[0]
	#Assumption: For a number (>10) to be divisible by more than x numbers it needs to be at least x*2
	if (triangle_number >= target_divisor_size*2) #optimised 14643ms to 1950.2ms!
		divisor_size = get_divisors(triangle_number).size
	end
end
end_time = Time.now

puts "Smallest triangle number with over five hundred divisors: #{triangle_number} (#{divisor_size})"
puts "Time to completion: #{((end_time - start_time) * 1000.0).round(2)}ms"